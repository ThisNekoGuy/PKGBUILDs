# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

pkgbase=linux-lqx-native
pkgver=5.13.19.lqx1
pkgrel=1
pkgdesc='Linux LQX Native'
_srctag=v${pkgver%.*}-${pkgver##*.}
url="https://github.com/zen-kernel/zen-kernel/commits/$_srctag"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc kmod libelf pahole cpio perl tar xz
  xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
  git
)
options=('!strip')
_srcname=zen-kernel
source=(
  "$_srcname::git+https://github.com/zen-kernel/zen-kernel?signed#tag=$_srctag"
  config         # the main kernel config file
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
  'C5ADB4F3FEBBCE27A3E54D7D9AE4078033F8024D'  # Steven Barrett <steven@liquorix.net>
)
sha256sums=('SKIP'
            'a02dd97aa3ec17ab38c4698f7ca6596da5ef0410e2da3577afded678911ea880')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
export KCFLAGS="-pipe"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
  if true; then
  echo "-> Native config..."
    # General Setup
#    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
#    scripts/config --enable  CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --enable  CONFIG_EXPERT
    # IRQ subsystem
    scripts/config --disable CONFIG_GENERIC_IRQ_INJECTION
    # CPU/Task time and stats accounting
    scripts/config --enable  CONFIG_PSI_DEFAULT_DISABLED
    # Kernel Performance Events And Counters
    scripts/config --disable CONFIG_SLAB_FREELIST_HARDENED
    scripts/config --disable CONFIG_SLUB_CPU_PARTIAL
    scripts/config --disable CONFIG_PROFILING
    # Processor type and features
    scripts/config --enable  CONFIG_PROCESSOR_SELECT
    scripts/config --disable CONFIG_CPU_SUP_AMD
    scripts/config --disable CONFIG_CPU_SUP_HYGON
    scripts/config --disable CONFIG_CPU_SUP_CENTAUR
    scripts/config --disable CONFIG_CPU_SUP_ZHAOXIN
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable  CONFIG_MNATIVE_INTEL
    scripts/config --set-val CONFIG_NR_CPUS 8
    scripts/config --disable CONFIG_MICROCODE_AMD
    scripts/config --disable CONFIG_NUMA
    scripts/config --disable CONFIG_KEXEC_FILE
    scripts/config --disable CONFIG_CRASH_DUMP
    scripts/config --disable CONFIG_RANDOMIZE_BASE
    scripts/config --disable CONFIG_DYNAMIC_MEMORY_LAYOUT
    scripts/config --set-val CONFIG_PHYSICAL_ALIGN 0x1000000
    # CPU Frequency scaling
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --enable  CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    # EFI (Extensible Firmware Interface) Support
    scripts/config --disable CONFIG_EFI_SOFT_RESERVE    
    # Memory Management options
    scripts/config --disable CONFIG_MEMORY_HOTPLUG
    scripts/config --disable CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS
    scripts/config --enable  CONFIG_TRANSPARENT_HUGEPAGE_MADVISE
    # Device Drivers
    scripts/config --disable CONFIG_PCIEAER_INJECT
    scripts/config --disable CONFIG_PCIE_ECRC
#    scripts/config --disable CONFIG_PCIEASPM_DEFAULT
#    scripts/config --enable  CONFIG_PCIEASPM_PERFORMANCE
    # Graphics support
    scripts/config --disable CONFIG_AGP
    scripts/config --set-val CONFIG_VGA_ARB_MAX_GPUS 4
    # USB Host Controller Drivers
    # (for USB polling rate, xhci doesn't respect usbhid)
#    scripts/config --module  CONFIG_USB_XHCI_HCD
#    scripts/config --module  CONFIG_USB_EHCI_HCD
    # Kernel Testing and Coverage
    scripts/config --enable  CONFIG_MEMTEST
  make olddefconfig
  cat .config > "${startdir}/configs/config-${pkgver%.*}-${pkgrel}-native"
  echo "-> Liquorix config..."
    # General setup
    scripts/config --enable  CONFIG_SCHED_MUQSS
    scripts/config --disable CONFIG_FAIR_GROUP_SCHED
#    scripts/config --disable CONFIG_CHECKPOINT_RESTORE
    # Timers subsystem
    scripts/config --disable CONFIG_NO_HZ
    # BPF subsystem
    scripts/config --disable CONFIG_BPF_PRELOAD
    # CPU/Task time and stats accounting
    scripts/config --disable CONFIG_IRQ_TIME_ACCOUNTING
    # RCU Subsystem
    scripts/config --disable CONFIG_TASKS_RUDE_RCU
    scripts/config --disable CONFIG_RCU_FAST_NO_HZ
    scripts/config --set-val CONFIG_RCU_BOOST_DELAY 331
    scripts/config --enable  CONFIG_RCU_NOCB_CPU
    # Scheduler features
    scripts/config --disable CONFIG_UCLAMP_TASK
    # Processor type and features
    scripts/config --disable CONFIG_PARAVIRT_TIME_ACCOUNTING
    scripts/config --disable CONFIG_RQ_NONE
    scripts/config --enable  CONFIG_RQ_MC
    scripts/config --set-val CONFIG_SHARERQ 2
    # IO Schedulers
    scripts/config --enable  CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
    scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
    # Networking options
#    scripts/config --enable  CONFIG_TCP_CONG_BBR
#    scripts/config --enable  CONFIG_TCP_CONG_BBR2
#    scripts/config --disable CONFIG_DEFAULT_CUBIC
#    scripts/config --enable  CONFIG_DEFAULT_BBR2
    # Not found
    scripts/config --disable CONFIG_NTP_PPS
  make olddefconfig
  cat .config > "${startdir}/configs/config-${pkgver%.*}-${pkgrel}-liquorix"
  echo "-> Running nconfig..."
  make nconfig
  cat .config > "${startdir}/configs/config-${pkgver%.*}-${pkgrel}-nconfig"
  echo "-> Running localmodconfig..."
  make LSMOD=$HOME/.config/modprobed.db localmodconfig
  make nconfig
  cat .config > "${startdir}/configs/config-${pkgver%.*}-${pkgrel}-localmod"
  fi

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  make all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE VHBA-MODULE)
  replaces=()

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
