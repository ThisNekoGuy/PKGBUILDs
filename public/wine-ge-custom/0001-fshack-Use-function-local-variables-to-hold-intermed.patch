From b3cce7d2de0903c0291a4a24f8493adaf8324780 Mon Sep 17 00:00:00 2001
From: Stelios Tsampas <loathingkernel@gmail.com>
Date: Wed, 27 Jul 2022 22:11:22 +0300
Subject: [PATCH] fshack: Use function-local variables to hold intermediate
 monitor sizes

---
 dlls/winex11.drv/fs.c | 39 +++++++++++----------------------------
 1 file changed, 11 insertions(+), 28 deletions(-)

diff --git a/dlls/winex11.drv/fs.c b/dlls/winex11.drv/fs.c
index a7e748bc76d..f0d4703d88d 100644
--- a/dlls/winex11.drv/fs.c
+++ b/dlls/winex11.drv/fs.c
@@ -141,15 +141,6 @@ static struct fs_monitor_size fs_monitor_sizes_base[] =
     {1280, 1024}, /*  5:4 */
 };
 
-/* Dynamically assigned FSR resolutions */
-static struct fs_monitor_size fs_monitor_sizes_fsr[] =
-{
-    {0, 0}, /* FSR Performance */
-    {0, 0}, /* FSR Balanced */
-    {0, 0}, /* FSR Quality */
-    {0, 0}, /* FSR Ultra Quality */
-};
-
 /* The order should be in sync with the values in 'fs_hack_is_fsr_single_mode'*/
 static float fsr_ratios[] = {
     2.0f, /* FSR Performance */
@@ -158,13 +149,6 @@ static float fsr_ratios[] = {
     1.3f, /* FSR Ultra Quality */
 };
 
-/* Fake resolution container */
-static struct fs_monitor_size fsr_custom_size = {0, 0};
-
-struct fs_monitor_size *fs_monitor_sizes = NULL;
-UINT fs_monitor_sizes_count = 0;
-
-
 /* A fake monitor for the fullscreen hack */
 struct fs_monitor
 {
@@ -240,7 +224,7 @@ static void add_fs_mode(struct fs_monitor *fs_monitor, DWORD depth, DWORD width,
     mode->dmDisplayFrequency = frequency;
 }
 
-BOOL fs_hack_is_fsr_single_mode(UINT *mode)
+static BOOL fs_hack_is_fsr_single_mode(UINT *mode)
 {
     const char *e;
 
@@ -267,7 +251,7 @@ BOOL fs_hack_is_fsr_single_mode(UINT *mode)
     return FALSE;
 }
 
-BOOL fs_hack_is_fsr_custom_mode(void)
+static BOOL fs_hack_is_fsr_custom_mode(struct fs_monitor_size *fsr_custom_size)
 {
     DWORD width, height;
     const char *e;
@@ -280,9 +264,9 @@ BOOL fs_hack_is_fsr_custom_mode(void)
         const int n = sscanf(e, "%dx%d", &width, &height);
         if (n==2)
         {
-            fsr_custom_size.width = width;
-            fsr_custom_size.height = height;
-            TRACE("found custom resolution: %dx%d\n", fsr_custom_size.width, fsr_custom_size.height);
+            fsr_custom_size->width = width;
+            fsr_custom_size->height = height;
+            TRACE("found custom resolution: %dx%d\n", fsr_custom_size->width, fsr_custom_size->height);
             return TRUE;
         }
     }
@@ -298,7 +282,11 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
     ULONG offset;
     UINT i, j;
 
-    UINT fsr_mode;
+    /* Default resolutions + FSR resolutions + Custom resolution */
+    struct fs_monitor_size fs_monitor_sizes[ARRAY_SIZE(fs_monitor_sizes_base) + ARRAY_SIZE(fsr_ratios) + 1];
+    struct fs_monitor_size fs_monitor_sizes_fsr[ARRAY_SIZE(fsr_ratios)];
+    struct fs_monitor_size fsr_custom_size;
+    UINT fs_monitor_sizes_count, fsr_mode;
     float sharpness, real_w_ratio, h_ratio, h_factor;
     BOOL is_fsr, is_fsr_single_mode, is_fsr_custom_mode;
 
@@ -316,12 +304,7 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
     is_fsr_single_mode = FALSE;
     is_fsr_custom_mode = FALSE;
 
-    if (fs_monitor_sizes)
-        heap_free(fs_monitor_sizes);
-    fs_monitor_sizes = NULL;
     fs_monitor_sizes_count = 0;
-    if (!(fs_monitor_sizes = heap_alloc(sizeof(fs_monitor_sizes_base) + sizeof(fs_monitor_sizes_fsr) + sizeof(fsr_custom_size))))
-        return FALSE;
 
     /* Copy the default list */
     memcpy(fs_monitor_sizes+fs_monitor_sizes_count, fs_monitor_sizes_base, sizeof(fs_monitor_sizes_base));
@@ -402,7 +385,7 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
         }
 
         /* Add the custom resolution to the list */
-        is_fsr_custom_mode = fs_hack_is_fsr_custom_mode();
+        is_fsr_custom_mode = fs_hack_is_fsr_custom_mode(&fsr_custom_size);
         if (is_fsr_custom_mode)
         {
             memcpy(fs_monitor_sizes+fs_monitor_sizes_count, &fsr_custom_size, sizeof(fsr_custom_size));
-- 
2.37.1

